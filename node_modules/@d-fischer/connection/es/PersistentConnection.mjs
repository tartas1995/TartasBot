var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { delay } from '@d-fischer/shared-utils';
import { EventEmitter } from '@d-fischer/typed-event-emitter';
var PersistentConnection = /** @class */ (function (_super) {
    __extends(PersistentConnection, _super);
    function PersistentConnection(_type, _connectionInfo, config) {
        if (config === void 0) { config = {}; }
        var _a;
        var _this = _super.call(this) || this;
        _this._type = _type;
        _this._connectionInfo = _connectionInfo;
        _this._retryLimit = Infinity;
        _this._connecting = false;
        _this._connectionRetryCount = 0;
        _this.onReceive = _this.registerEvent();
        _this.onConnect = _this.registerEvent();
        _this.onDisconnect = _this.registerEvent();
        _this.onEnd = _this.registerEvent();
        _this._retryLimit = (_a = config.retryLimit) !== null && _a !== void 0 ? _a : Infinity;
        _this._logger = config.logger;
        return _this;
    }
    Object.defineProperty(PersistentConnection.prototype, "isConnected", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.isConnected) !== null && _b !== void 0 ? _b : false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersistentConnection.prototype, "isConnecting", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.isConnecting) !== null && _b !== void 0 ? _b : this._connecting;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersistentConnection.prototype, "host", {
        get: function () {
            return this._connectionInfo.hostName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersistentConnection.prototype, "port", {
        get: function () {
            return this._connectionInfo.port;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersistentConnection.prototype, "hasSocket", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.hasSocket) !== null && _b !== void 0 ? _b : false;
        },
        enumerable: false,
        configurable: true
    });
    PersistentConnection.prototype.sendLine = function (line) {
        var _a;
        (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.sendLine(line);
    };
    PersistentConnection.prototype.connect = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var _loop_1, this_1, state_1;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this._currentConnection || this._connecting) {
                            throw new Error('Connection already present');
                        }
                        this._connectionRetryCount = 0;
                        this._connecting = true;
                        this._retryTimerGenerator = PersistentConnection._getReconnectWaitTime();
                        _loop_1 = function () {
                            var newConnection, e_1, secs;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        newConnection = (this_1._currentConnection = new this_1._type(this_1._connectionInfo));
                                        newConnection.onReceive(function (line) { return _this.emit(_this.onReceive, line); });
                                        newConnection.onConnect(function () { return _this.emit(_this.onConnect); });
                                        newConnection.onDisconnect(function (manually, reason) {
                                            _this.emit(_this.onDisconnect, manually, reason);
                                            if (manually) {
                                                _this.emit(_this.onEnd, true);
                                                newConnection.disconnect();
                                                if (_this._currentConnection === newConnection) {
                                                    _this._currentConnection = undefined;
                                                }
                                            }
                                            else if (!_this._connecting) {
                                                _this.reconnect();
                                            }
                                        });
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 5]);
                                        return [4 /*yield*/, newConnection.connect()];
                                    case 2:
                                        _a.sent();
                                        this_1._connecting = false;
                                        return [2 /*return*/, { value: void 0 }];
                                    case 3:
                                        e_1 = _a.sent();
                                        if (!this_1._connecting) {
                                            return [2 /*return*/, { value: void 0 }];
                                        }
                                        this_1._connectionRetryCount++;
                                        secs = this_1._retryTimerGenerator.next().value;
                                        if (secs !== 0) {
                                            (_a = this_1._logger) === null || _a === void 0 ? void 0 : _a.info("Retrying in " + secs + " seconds");
                                        }
                                        return [4 /*yield*/, delay(secs * 1000)];
                                    case 4:
                                        _a.sent();
                                        (_b = this_1._logger) === null || _b === void 0 ? void 0 : _b.info('Trying to reconnect');
                                        if (!this_1._connecting) {
                                            return [2 /*return*/, { value: void 0 }];
                                        }
                                        return [3 /*break*/, 5];
                                    case 5: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _c.label = 1;
                    case 1:
                        if (!(this._connectionRetryCount <= this._retryLimit)) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _c.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        return [3 /*break*/, 1];
                    case 3:
                        this.emit(this.onEnd, false, new Error("Connection failed after trying " + this._retryLimit + " times"));
                        return [2 /*return*/];
                }
            });
        });
    };
    PersistentConnection.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._connecting = false;
                        if (!this._currentConnection) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._currentConnection.disconnect()];
                    case 1:
                        _a.sent();
                        this._currentConnection = undefined;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    PersistentConnection.prototype.assumeExternalDisconnect = function () {
        var _a;
        (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.assumeExternalDisconnect();
    };
    PersistentConnection.prototype.reconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.disconnect()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.connect()];
                }
            });
        });
    };
    // yes, this is just fibonacci with a limit
    PersistentConnection._getReconnectWaitTime = function () {
        var current, next;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    current = 0;
                    next = 1;
                    _b.label = 1;
                case 1:
                    if (!(current < 120)) return [3 /*break*/, 3];
                    return [4 /*yield*/, current];
                case 2:
                    _b.sent();
                    _a = [next, current + next], current = _a[0], next = _a[1];
                    return [3 /*break*/, 1];
                case 3:
                    if (!true) return [3 /*break*/, 5];
                    return [4 /*yield*/, 120];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 3];
                case 5: return [2 /*return*/];
            }
        });
    };
    return PersistentConnection;
}(EventEmitter));
export { PersistentConnection };
//# sourceMappingURL=PersistentConnection.mjs.map