var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { AbstractConnection } from "./AbstractConnection.mjs";
import WebSocket from '@d-fischer/isomorphic-ws';
var WebSocketConnection = /** @class */ (function (_super) {
    __extends(WebSocketConnection, _super);
    function WebSocketConnection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(WebSocketConnection.prototype, "port", {
        get: function () {
            return this._port;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebSocketConnection.prototype, "hasSocket", {
        get: function () {
            return !!this._socket;
        },
        enumerable: false,
        configurable: true
    });
    WebSocketConnection.prototype.sendRaw = function (line) {
        var _a;
        (_a = this._socket) === null || _a === void 0 ? void 0 : _a.send(line);
    };
    WebSocketConnection.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this._connecting = true;
                        var url = "ws" + (_this._secure ? 's' : '') + "://" + _this._host + ":" + _this.port;
                        _this._socket = new WebSocket(url);
                        _this._socket.onopen = function () {
                            _this._connected = true;
                            _this._connecting = false;
                            _this.emit(_this.onConnect);
                            resolve();
                        };
                        _this._socket.onmessage = function (_a) {
                            var data = _a.data;
                            _this.receiveRaw(data.toString());
                        };
                        // The following empty error callback needs to exist so connection errors are passed down to `onclose` down below - otherwise the process just crashes instead
                        _this._socket.onerror = function () { };
                        _this._socket.onclose = function (e) {
                            var wasConnected = _this._connected;
                            _this._connected = false;
                            _this._connecting = false;
                            if (e.wasClean) {
                                _this.emit(_this.onDisconnect, true);
                                _this.emit(_this.onEnd, true);
                            }
                            else {
                                var err = new Error("[" + e.code + "] " + e.reason);
                                _this.emit(_this.onDisconnect, false, err);
                                _this.emit(_this.onEnd, false, err);
                                if (!wasConnected) {
                                    reject(err);
                                }
                            }
                        };
                    })];
            });
        });
    };
    WebSocketConnection.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        var _a;
                        var listener = _this.onDisconnect(function () {
                            listener.unbind();
                            resolve();
                        });
                        (_a = _this._socket) === null || _a === void 0 ? void 0 : _a.close();
                        _this._socket = undefined;
                    })];
            });
        });
    };
    return WebSocketConnection;
}(AbstractConnection));
export { WebSocketConnection };
//# sourceMappingURL=WebSocketConnection.mjs.map