var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventEmitter } from '@d-fischer/typed-event-emitter';
var AbstractConnection = /** @class */ (function (_super) {
    __extends(AbstractConnection, _super);
    function AbstractConnection(_a) {
        var hostName = _a.hostName, port = _a.port, secure = _a.secure, lineBased = _a.lineBased;
        var _this = _super.call(this) || this;
        _this._currentLine = '';
        _this._connecting = false;
        _this._connected = false;
        _this._manualDisconnect = false;
        _this.onReceive = _this.registerEvent();
        _this.onConnect = _this.registerEvent();
        _this.onDisconnect = _this.registerEvent();
        _this.onEnd = _this.registerEvent();
        _this._secure = secure !== null && secure !== void 0 ? secure : true;
        _this._lineBased = lineBased !== null && lineBased !== void 0 ? lineBased : false;
        _this._host = hostName;
        _this._port = port;
        return _this;
    }
    Object.defineProperty(AbstractConnection.prototype, "isConnecting", {
        get: function () {
            return this._connecting;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractConnection.prototype, "isConnected", {
        get: function () {
            return this._connected;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractConnection.prototype, "host", {
        get: function () {
            return this._host;
        },
        enumerable: false,
        configurable: true
    });
    AbstractConnection.prototype.sendLine = function (line) {
        if (this._connected) {
            line = line.replace(/[\0\r\n]/g, '');
            this.sendRaw(line + "\r\n");
        }
    };
    AbstractConnection.prototype.assumeExternalDisconnect = function () {
        this._connected = false;
        this._connecting = false;
        this.emit(this.onDisconnect, false);
    };
    AbstractConnection.prototype.receiveRaw = function (data) {
        if (!this._lineBased) {
            this.emit(this.onReceive, data);
            return;
        }
        var receivedLines = data.split('\r\n');
        this._currentLine += receivedLines.shift() || '';
        if (receivedLines.length) {
            this.emit(this.onReceive, this._currentLine);
            this._currentLine = receivedLines.pop() || '';
            for (var _i = 0, receivedLines_1 = receivedLines; _i < receivedLines_1.length; _i++) {
                var line = receivedLines_1[_i];
                this.emit(this.onReceive, line);
            }
        }
    };
    return AbstractConnection;
}(EventEmitter));
export { AbstractConnection };
//# sourceMappingURL=AbstractConnection.mjs.map