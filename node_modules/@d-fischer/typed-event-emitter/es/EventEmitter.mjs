var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { Listener } from "./Listener.mjs";
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        this._eventListeners = new Map();
    }
    EventEmitter.prototype.on = function (event, listener) {
        if (this._eventListeners.has(event)) {
            this._eventListeners.get(event).push(listener);
        }
        else {
            this._eventListeners.set(event, [listener]);
        }
        return new Listener(this, event, listener);
    };
    EventEmitter.prototype.addListener = function (event, listener) {
        return this.on(event, listener);
    };
    EventEmitter.prototype.removeListener = function (idOrEvent, listener) {
        if (!idOrEvent) {
            this._eventListeners.clear();
        }
        else if (typeof idOrEvent === 'object') {
            var id = idOrEvent;
            this.removeListener(id.event, id.listener);
        }
        else {
            var event = idOrEvent;
            if (this._eventListeners.has(event)) {
                if (listener) {
                    var listeners = this._eventListeners.get(event);
                    var idx = 0;
                    while ((idx = listeners.indexOf(listener)) !== -1) {
                        listeners.splice(idx, 1);
                    }
                }
                else {
                    this._eventListeners.delete(event);
                }
            }
        }
    };
    /**
     * @typeparam T The event handler signature.
     */
    EventEmitter.prototype.registerEvent = function () {
        var _this = this;
        var eventBinder = function (handler) { return _this.addListener(eventBinder, handler); };
        return eventBinder;
    };
    /**
     * Emit event. Calls all bound listeners with args.
     */
    EventEmitter.prototype.emit = function (event) {
        var e_1, _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this._eventListeners.has(event)) {
            try {
                for (var _b = __values(this._eventListeners.get(event)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var listener = _c.value;
                    listener.apply(void 0, __spread(args));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    return EventEmitter;
}());
export { EventEmitter };
//# sourceMappingURL=EventEmitter.mjs.map