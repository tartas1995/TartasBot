var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var NotEnoughParametersError = /** @class */ (function (_super) {
    __extends(NotEnoughParametersError, _super);
    function NotEnoughParametersError(_command, _expectedParams, _actualParams) {
        var _this = _super.call(this, "command \"" + _command + "\" expected " + _expectedParams + " or more parameters, got " + _actualParams) || this;
        _this._command = _command;
        _this._expectedParams = _expectedParams;
        _this._actualParams = _actualParams;
        Object.setPrototypeOf(_this, NotEnoughParametersError.prototype);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, NotEnoughParametersError);
        }
        return _this;
    }
    Object.defineProperty(NotEnoughParametersError.prototype, "command", {
        get: function () {
            return this._command;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NotEnoughParametersError.prototype, "expectedParams", {
        get: function () {
            return this._expectedParams;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NotEnoughParametersError.prototype, "actualParams", {
        get: function () {
            return this._actualParams;
        },
        enumerable: false,
        configurable: true
    });
    return NotEnoughParametersError;
}(Error));
export { NotEnoughParametersError };
