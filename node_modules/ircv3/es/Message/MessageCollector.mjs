var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var MessageCollector = /** @class */ (function () {
    function MessageCollector(_client, _originalMessage) {
        var types = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            types[_i - 2] = arguments[_i];
        }
        this._client = _client;
        this._originalMessage = _originalMessage;
        this._messages = [];
        this._endEventHandlers = new Map();
        this._types = new Set(types);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    MessageCollector.prototype.untilEvent = function (eventType) {
        var _this = this;
        this._cleanEndEventHandler(eventType);
        var listener = this._client.on(eventType, function () { return _this.end(); });
        this._endEventHandlers.set(eventType, listener);
    };
    MessageCollector.prototype.promise = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this._promise) {
                    this._promise = new Promise(function (resolve) { return (_this._promiseResolve = resolve); });
                }
                return [2 /*return*/, this._promise];
            });
        });
    };
    MessageCollector.prototype.collect = function (message) {
        if (!this._originalMessage._acceptsInReplyCollection(message)) {
            return false;
        }
        this._messages.push(message);
        if (message.endsResponseTo(this._originalMessage)) {
            this.end();
        }
        return true;
    };
    MessageCollector.prototype.end = function () {
        this._client.stopCollect(this);
        this._cleanEndEventHandlers();
        if (this._promiseResolve) {
            this._promiseResolve(this._messages);
        }
    };
    MessageCollector.prototype._cleanEndEventHandlers = function () {
        var _this = this;
        this._endEventHandlers.forEach(function (listener) { return _this._client.removeListener(listener); });
        this._endEventHandlers.clear();
    };
    MessageCollector.prototype._cleanEndEventHandler = function (eventType) {
        if (this._endEventHandlers.has(eventType)) {
            this._client.removeListener(this._endEventHandlers.get(eventType));
            this._endEventHandlers.delete(eventType);
        }
    };
    return MessageCollector;
}());
export { MessageCollector };
